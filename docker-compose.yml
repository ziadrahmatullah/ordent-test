version: "3.9"

services:
  rest:
    container_name: ecommerce_rest_golang
    build: .
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      REST_HOST: rest
      DB_HOST: database
      DB_PORT: ${DB_PORT}
    networks:
      ecommerce_network:
    depends_on:
      database:
        condition: service_healthy


  rest_dev:
    container_name: ecommerce_rest_dev_golang
    build:
      context: .
      target: rest_watch
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      REST_HOST: rest_dev
      DB_HOST: database
      DB_PORT: ${DB_PORT}
    networks:
      ecommerce_network:
    depends_on:    
      database:
        condition: service_healthy
    links:
      - database
    volumes:
      - ./:/app
    


  database:
    image: postgis/postgis:16-3.4-alpine
    container_name: ecommerce_db_postgres
    ports:
      - "${DB_PORT}:${DB_PORT}"
    environment:
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d ecommerce_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ecommerce_volume:/var/lib/postgresql/data
    networks:
      ecommerce_network:

  postgis-migration:
    build:
      context: .
      target: "postgis_migration"
    environment:
      DB_HOST: database
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      DB_NAME: ${DB_NAME}
    networks:
      ecommerce_network:
    depends_on:
      database:
        condition: service_healthy

  migration:
    container_name: ecommerce_migration
    build:
      context: .
      target: "migration"
    env_file:
      - .env
    environment:
      DB_HOST: database
      DB_PORT: ${DB_PORT}
    depends_on:
      database:
        condition: service_healthy
    networks:
      ecommerce_network:
    volumes:
      - ./:/app

volumes:
  ecommerce_volume:

networks:
  ecommerce_network: